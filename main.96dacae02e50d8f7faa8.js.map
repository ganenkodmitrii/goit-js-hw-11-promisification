{"version":3,"sources":["webpack:///./js/task-1.js"],"names":["delay","ms","Promise","resolved","setTimeout","logger","time","console","log","then"],"mappings":"gLAOOA,EAAQ,SAAAC,GASV,OAPgB,IAAIC,SAAQ,SAACC,GAEzBC,YAAW,WACPD,EAASF,KACVA,OAMNI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G","file":"main.96dacae02e50d8f7faa8.js","sourcesContent":["/*\r\n Напиши функцию delay(ms),\r\n которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\r\n Значением исполнившегося промиса должно быть то кол-во миллисекунд\r\n которое передали во время вызова функции delay.\r\n */\r\n\r\n const delay = ms => {\r\n       \r\n     const promise = new Promise((resolved) => {\r\n         \r\n         setTimeout(() => {\r\n             resolved(ms);\r\n         }, ms);\r\n     })\r\n     \r\n     return promise;\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms"],"sourceRoot":""}