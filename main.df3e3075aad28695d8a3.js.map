{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolved","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","resolve","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAOOA,EAAQ,SAAAC,GASV,OAPgB,IAAIC,SAAQ,SAACC,GAEzBC,YAAW,WACPD,EAASF,KACVA,OAMNI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCpBXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAE/B,OAAO,IAAIb,SAAQ,SAACc,GAQhBA,EANqBF,EAASG,KAAI,SAAAC,GAAI,OAElCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,UASnEb,EAAS,SAAAc,GAAY,OAAIZ,QAAQa,MAAMD,IAE7CN,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCxBnC,IAIMgB,EAAkB,SAAAC,GAEpB,OAAO,IAAIpB,SAAQ,SAACc,EAASO,GACzB,IAP2BC,EAAKC,EAO1BzB,GAPqBwB,EAOa,IAPRC,EAOa,IAN5CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAQ9CpB,YAAW,WACYsB,KAAKE,SAAW,IAGpCZ,EAAQ,CACLa,GAAIP,EAAYO,GAChBvB,KAAMN,IAGZuB,EAAOD,EAAYO,MACjB7B,OAIJ8B,EAAa,SAAC,GAAe,IAAdD,EAAc,EAAdA,GAAIvB,EAAU,EAAVA,KACvBC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAGIyB,EAAW,SAAAF,GACftB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAMFR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,K","file":"main.df3e3075aad28695d8a3.js","sourcesContent":["/*\r\n Напиши функцию delay(ms),\r\n которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\r\n Значением исполнившегося промиса должно быть то кол-во миллисекунд\r\n которое передали во время вызова функции delay.\r\n */\r\n\r\n const delay = ms => {\r\n       \r\n     const promise = new Promise((resolved) => {\r\n         \r\n         setTimeout(() => {\r\n             resolved(ms);\r\n         }, ms);\r\n     })\r\n     \r\n     return promise;\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","/**\r\n * Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, \r\n * а принимала всего два параметра allUsers и userName и возвращала промис.\r\n */\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    \r\n    return new Promise((resolve) => {\r\n    \r\n        const updatedUsers = allUsers.map(user =>\r\n    \r\n            user.name === userName ? { ...user, active: !user.active } : user,\r\n  \r\n        );\r\n    \r\n        resolve(updatedUsers)\r\n    })\r\n \r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n/*\r\n * работало так\r\n\r\nconst toggleUserState = (allUsers, userName, callback) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n  callback(updatedUsers);\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n\r\ntoggleUserState(users, 'Mango', logger);\r\ntoggleUserState(users, 'Lux', logger);\r\n */","/*\r\n Перепиши функцию makeTransaction() так, \r\n чтобы она не использовала callback-функции onSuccess и onError, \r\n а принимала всего один параметр transaction и возвращала промис.\r\n*/\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n\r\n         if (canProcess) {  \r\n           resolve({\r\n              id: transaction.id,\r\n              time: delay,\r\n          });\r\n       } \r\n        reject(transaction.id);\r\n       }, delay);\r\n    })  \r\n};\r\n\r\nconst logSuccess = ({id, time}) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}